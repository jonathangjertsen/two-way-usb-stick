from argparse import ArgumentParser

def main():
    parser = ArgumentParser()
    parser.add_argument("infile")
    parser.add_argument("max_zeros", type=int)
    args = parser.parse_args()
    with open(args.infile, "rb") as file:
        data = file.read()
    regions = []
    reg_start = None
    zeros = 0
    for i, byte in enumerate(data):
        if reg_start is None:
            if byte != 0:
                reg_start = i
        else:
            if byte == 0:
                zeros += 1
                if zeros > args.max_zeros:
                    regions.append((reg_start, i - zeros + 1))
                    reg_start = None
                    zeros = 0
            else:
                zeros = 0
    if reg_start is not None:
        regions.append(reg_start, len(data))

    print(f"""
#include "ramdisk_autogenerated.h"

#include <stdint.h>
#include <stddef.h>
#include <string.h>

typedef struct disk_reg_t {{
    size_t start;
    size_t size;
    const uint8_t *data;
}} disk_reg_t;
""")

    for i, (start, end) in enumerate(regions):
        print()
        print(f"static const uint8_t disk_region_data_{i}[{end - start}U] = {{ {', '.join(map(str, data[start:end])) }}};")
        print(f"static const disk_reg_t disk_region_{i} = {{ .start={start}U, .data=disk_region_data_{i}, .size={end-start}U }};")
    print()
    print(f"static const disk_reg_t *disk_regions[{len(regions)}] = {{")
    for i in range(len(regions)):
        print(f"    &disk_region_{i},")
    print(f"}};")

    print(f"""
void ramdisk_init(uint8_t *buffer)
{{
    for (int i = 0; i < {len(regions)}; i++)
    {{
        const disk_reg_t *disk_region = disk_regions[i];
        memcpy(buffer + disk_region->start, disk_region->data, disk_region->size);
    }}
}}
""")

if __name__ == "__main__":
    main()
